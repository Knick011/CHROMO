<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Genetic Recombination Simulator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .centered-container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        select, button, input[type=range] {
            padding: 10px;
            margin: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            outline: none;
        }

        .centered-button {
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .centered-button:hover {
            background-color: #45a049;
        }

        /* Additional styles will be defined in subsequent parts */
    </style>
</head>
<body>
    <div class="centered-container">
        <h2>Genetic Recombination Simulator</h2>
        <p>Select cross type and simulate recombination:</p>

        <!-- Dropdown for selecting the cross type -->
        <select id="crossTypeSelect">
            <option value="unlinked">Unlinked Loci</option>
            <option value="cisLinked">Cis-Linked Loci</option>
            <option value="transLinked">Trans-Linked Loci</option>
            <option value="completeLinked">Completely Linked Loci</option>
            <option value="custom">Custom Recombination</option>
        </select>
        
        <!-- Button to initiate simulation -->
        <button class="centered-button" id="simulateRecombination">Simulate Recombination</button>
        <!-- Areas to display results and explanations -->
        <div id="resultsArea"></div>
        <div id="explanationArea">
            <p>This tool simulates genetic recombination involving two loci. You can choose between different types of crosses to see the recombination frequencies and resulting phenotypes.</p>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Accessing elements from the DOM
            const crossTypeSelect = document.getElementById("crossTypeSelect");
            const resultsArea = document.getElementById("resultsArea");
            const simulateRecombination = document.getElementById("simulateRecombination");
    
            // Function to create genotype selectors for parents
            function createParentGenotypeSelectors(parentNumber) {
                const container = document.createElement('div');
                container.className = 'genotype-select-container';
    
                const label = document.createElement('label');
                label.textContent = `Parent ${parentNumber} Genotype: `;
                container.appendChild(label);
    
                const genotypeSelect1 = document.createElement('select');
                genotypeSelect1.innerHTML = `
                    <option value="A">A</option>
                    <option value="a">a</option>
                `;
                container.appendChild(genotypeSelect1);
    
                const genotypeSelect2 = document.createElement('select');
                genotypeSelect2.innerHTML = `
                    <option value="B">B</option>
                    <option value="b">b</option>
                `;
                container.appendChild(genotypeSelect2);
    
                return container;
            }
    
            // Function to update UI based on selected cross type
            function updateUIForCrossType() {
                // Clear previous UI elements
                while(resultsArea.firstChild) {
                    resultsArea.removeChild(resultsArea.firstChild);
                }
    
                // Create and append genotype selectors for parents
                const parent1Selectors = createParentGenotypeSelectors(1);
                const parent2Selectors = createParentGenotypeSelectors(2);
                resultsArea.appendChild(parent1Selectors);
                resultsArea.appendChild(parent2Selectors);
            }
            // Event listener for cross type selection change
            crossTypeSelect.addEventListener('change', updateUIForCrossType);

            function simulateGeneticRecombination() {
                // Fetching selected cross type and parental genotypes
                const crossType = crossTypeSelect.value;
                const parent1Alleles = Array.from(document.querySelectorAll('.genotype-select-container:nth-child(1) select')).map(select => select.value);
                const parent2Alleles = Array.from(document.querySelectorAll('.genotype-select-container:nth-child(2) select')).map(select => select.value);

                // Function to calculate offspring genotypes and phenotypes
                function calculateOffspring(parent1, parent2) {
                    const offspring = [];
                    for (let allele1 of parent1) {
                        for (let allele2 of parent2) {
                            offspring.push(allele1 + allele2);
                        }
                    }
                    return offspring;
                }

                // Calculating offspring based on cross type
                let offspringResults;
                switch (crossType) {
                    case 'unlinked':
                        // Unlinked loci - independent assortment
                        offspringResults = calculateOffspring([parent1Alleles[0], parent2Alleles[0]], [parent1Alleles[1], parent2Alleles[1]]);
                        break;
                    case 'cisLinked':
                    case 'transLinked':
                        // Cis or Trans Linked loci - linkage with or without crossing over
                        const linked = crossType === 'cisLinked';
                        offspringResults = calculateOffspring([parent1Alleles[0] + (linked ? parent1Alleles[1] : parent2Alleles[1])], [parent2Alleles[0] + (linked ? parent2Alleles[1] : parent1Alleles[1])]);
                        break;
                    case 'completeLinked':
                        // Completely linked loci - no recombination
                        offspringResults = [parent1Alleles.join(''), parent2Alleles.join('')];
                        break;
                    case 'custom':
                        // Custom recombination logic (to be implemented based on user's requirements)
                        break;
                    default:
                        offspringResults = [];
                        break;
                }

                // Displaying results
                displayResults(offspringResults);
            }

            // Function to display results
            function displayResults(results) {
                // Clear previous results
                resultsArea.innerHTML = '';

                // Create and append results
                results.forEach(result => {
                    const resultElement = document.createElement('div');
                    resultElement.textContent = `Offspring Genotype: ${result}`;
                    resultsArea.appendChild(resultElement);
                });
            }

            // Update the event listener for simulate recombination button
            simulateRecombination.addEventListener('click', simulateGeneticRecombination);
            function displayEnhancedResults(offspringResults) {
                // Clear previous results
                resultsArea.innerHTML = '';

                // Create a table to display results
                const resultTable = document.createElement('table');
                resultTable.innerHTML = `
                    <tr>
                        <th>Phenotype</th>
                        <th>Count</th>
                        <th>Recombinant Type</th>
                    </tr>
                `;
                resultsArea.appendChild(resultTable);

                // Count occurrences of each phenotype
                const phenotypeCounts = offspringResults.reduce((counts, genotype) => {
                    const phenotype = genotype.replace(/a/g, 'A').replace(/b/g, 'B'); // Example logic for determining phenotype
                    counts[phenotype] = (counts[phenotype] || 0) + 1;
                    return counts;
                }, {});

                // Add rows to the table for each phenotype
                Object.entries(phenotypeCounts).forEach(([phenotype, count]) => {
                    const row = resultTable.insertRow();
                    row.innerHTML = `
                        <td>${phenotype}</td>
                        <td>${count}</td>
                        <td>${determineRecombinantType(phenotype)}</td>
                    `;
                });
            }

            // Function to determine recombinant type based on phenotype
            function determineRecombinantType(phenotype) {
                // Logic to determine recombinant type (Parental or Recombinant)
                // This logic may vary based on the specific rules of the simulation
                return phenotype === 'AB' or phenotype === 'ab' ? 'Parental' : 'Recombinant';
            }

            // Function to calculate recombination frequency and map distance
            function calculateRecombinationFrequencyAndMapDistance(offspringResults) {
                const totalOffspring = offspringResults.length;
                const recombinantCount = offspringResults.filter(result => determineRecombinantType(result.replace(/a/g, 'A').replace(/b/g, 'B')) === 'Recombinant').length;

                const recombinationFraction = recombinantCount / totalOffspring;
                const recombinationFrequency = recombinationFraction * 100;
                const mapUnits = recombinationFrequency; // Assuming 1% recombination = 1 map unit

                return { recombinationFrequency, mapUnits };
            }
            // Update the displayEnhancedResults function to include recombination frequency and map distance
            function displayEnhancedResults(offspringResults) {
                // ... [Existing logic to display results]

                // Calculate recombination frequency and map distance
                const { recombinationFrequency, mapUnits } = calculateRecombinationFrequencyAndMapDistance(offspringResults);

                // Display recombination information
                const recombinationInfo = document.createElement('div');
                recombinationInfo.innerHTML = `
                    <p>Recombination Frequency: ${recombinationFrequency.toFixed(2)}%</p>
                    <p>Map Distance: ${mapUnits.toFixed(2)} map units (centimorgans)</p>
                `;
                resultsArea.appendChild(recombinationInfo);
            }

            // Function to provide an explanation based on cross type
            function provideCrossTypeExplanation(crossType) {
                let explanationText = "";
                switch (crossType) {
                    case 'unlinked':
                        explanationText = "In unlinked loci, the genes assort independently, leading to a 50% recombination frequency.";
                        break;
                    case 'cisLinked':
                    case 'transLinked':
                        explanationText = "In linked loci (cis or trans), the genes are on the same chromosome and show linkage. The recombination frequency is lower compared to unlinked loci.";
                        break;
                    case 'completeLinked':
                        explanationText = "Completely linked loci show no recombination as the genes are closely linked on the same chromosome.";
                        break;
                    case 'custom':
                        explanationText = "Custom recombination allows for specific configurations and observations of recombination patterns.";
                        break;
                    default:
                        explanationText = "Select a cross type to see the explanation.";
                        break;
                }
                document.getElementById("explanationArea").textContent = explanationText;
            }

            // Update the event listener for the cross type selection to include explanations
            crossTypeSelect.addEventListener('change', function() {
                updateUIForCrossType();
                provideCrossTypeExplanation(crossTypeSelect.value);
            });

            // Initial setup
            updateUIForCrossType();
            provideCrossTypeExplanation(crossTypeSelect.value);

            // ... [Include all the previous JavaScript code from Parts 1-4 here]

            // Enhance the initial setup of the application
            function initializeApplication() {
                // Set up the UI based on the default or previously selected cross type
                updateUIForCrossType();
                provideCrossTypeExplanation(crossTypeSelect.value);

                // Event listener for cross type selection change
                crossTypeSelect.addEventListener('change', function() {
                    updateUIForCrossType();
                    provideCrossTypeExplanation(crossTypeSelect.value);
                });

                // Event listener for simulate recombination button
                simulateRecombination.addEventListener('click', function() {
                    // Clear previous results
                    resultsArea.innerHTML = '';

                    // Perform the recombination simulation
                    simulateGeneticRecombination();
                });
            }

            // Call to initialize the application
            document.addEventListener("DOMContentLoaded", initializeApplication);
        
    </script>
</body>
</html>
